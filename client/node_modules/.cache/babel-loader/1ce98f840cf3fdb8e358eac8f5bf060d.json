{"ast":null,"code":"var _jsxFileName = \"/Users/johnny/streams/client/src/components/streams/StreamCreate.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStream } from \"../../actions\";\nimport StreamForm from './streamForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StreamCreate extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ui button primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter description\";\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: \"streamCreate\",\n  validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrapped);","map":{"version":3,"sources":["/Users/johnny/streams/client/src/components/streams/StreamCreate.js"],"names":["React","connect","createStream","StreamForm","StreamCreate","Component","onSubmit","formValues","props","render","handleSubmit","renderInput","validate","errors","title","description","formWrapped","reduxForm","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAEA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAEvCC,QAFuC,GAE3BC,UAAD,IAAgB;AACvB,WAAKC,KAAL,CAAWN,YAAX,CAAwBK,UAAxB;AACH,KAJsC;AAAA;;AAMvCE,EAAAA,MAAM,GAAG;AACL,wBACI;AAAM,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKJ,QAA7B,CAAhB;AAAwD,MAAA,SAAS,EAAC,eAAlE;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKK,WAApC;AAAiD,QAAA,KAAK,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC;AAA7D;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAdsC;;AAiB3C,MAAMC,QAAQ,GAAIL,UAAD,IAAgB;AAC7B,QAAMM,MAAM,GAAG,EAAf;;AACA,MAAI,CAACN,UAAU,CAACO,KAAhB,EAAuB;AACnBD,IAAAA,MAAM,CAACC,KAAP,GAAe,sBAAf;AACH;;AACD,MAAI,CAACP,UAAU,CAACQ,WAAhB,EAA6B;AACzBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,4BAArB;AACH;;AACD,SAAOF,MAAP;AACH,CATD;;AAYA,MAAMG,WAAW,GAAGC,SAAS,CAAC;AAC1BC,EAAAA,IAAI,EAAE,cADoB;AAE1BN,EAAAA;AAF0B,CAAD,CAAT,CAGjBR,YAHiB,CAApB;AAKA,eAAeH,OAAO,CAAC,IAAD,EAAO;AAAEC,EAAAA;AAAF,CAAP,CAAP,CAAgCc,WAAhC,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStream } from \"../../actions\";\nimport StreamForm from './streamForm';\n\nclass StreamCreate extends React.Component {\n\n    onSubmit = (formValues) => {\n        this.props.createStream(formValues);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n                <Field name=\"title\" component={this.renderInput} label=\"Enter title\" />\n                <Field name=\"description\" component={this.renderInput} label=\"Enter description\" />\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n        );\n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {};\n    if (!formValues.title) {\n        errors.title = \"You must enter title\";\n    }\n    if (!formValues.description) {\n        errors.description = \"You must enter description\";\n    }\n    return errors;\n};\n\n\nconst formWrapped = reduxForm({\n    form: \"streamCreate\",\n    validate,\n})(StreamCreate);\n\nexport default connect(null, { createStream })(formWrapped);"]},"metadata":{},"sourceType":"module"}