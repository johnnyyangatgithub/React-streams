{"ast":null,"code":"var _jsxFileName = \"/Users/johnny/streams/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StreamCreate extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.renderInput = _ref => {\n      let {\n        input,\n        label,\n        meta\n      } = _ref;\n      const className = ``;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }, this), this.renderError(meta)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this); // return <input onChange={formProps.input.onChange} value={formProps.input.value} />;\n    };\n  }\n\n  renderError(_ref2) {\n    let {\n      error,\n      touched\n    } = _ref2;\n\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui error message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  onSubmit(formValues) {\n    console.log(formValues);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ui button primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter description';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);","map":{"version":3,"sources":["/Users/johnny/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","Component","renderInput","input","label","meta","className","renderError","error","touched","onSubmit","formValues","console","log","render","props","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAcvCC,WAduC,GAczB,QAA4B;AAAA,UAA3B;AAAEC,QAAAA,KAAF;AAASC,QAAAA,KAAT;AAAgBC,QAAAA;AAAhB,OAA2B;AACtC,YAAMC,SAAS,GAAI,EAAnB;AACA,0BACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACI;AAAA,oBAAQF;AAAR;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,sBAAWD,KAAX;AAAkB,UAAA,YAAY,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGK,KAAKI,WAAL,CAAiBF,IAAjB,CAHL;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CAFsC,CAStC;AACH,KAxBsC;AAAA;;AAEvCE,EAAAA,WAAW,QAAqB;AAAA,QAApB;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAoB;;AAC5B,QAAIA,OAAO,IAAID,KAAf,EAAsB;AAClB,0BACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,oBACKA;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH;AACJ;;AAcDE,EAAAA,QAAQ,CAACC,UAAD,EAAa;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL,wBACI;AAAM,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKN,QAA7B,CAAhB;AAAwD,MAAA,SAAS,EAAC,eAAlE;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,QAAA,KAAK,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC;AAA7D;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAtCsC;;AAyC3C,MAAMe,QAAQ,GAAIN,UAAD,IAAgB;AAC7B,QAAMO,MAAM,GAAG,EAAf;;AACA,MAAI,CAACP,UAAU,CAACQ,KAAhB,EAAuB;AACnBD,IAAAA,MAAM,CAACC,KAAP,GAAe,sBAAf;AACH;;AACD,MAAI,CAACR,UAAU,CAACS,WAAhB,EAA6B;AACzBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,4BAArB;AACH;;AACD,SAAOF,MAAP;AACH,CATD;;AAYA,eAAenB,SAAS,CAAC;AACrBsB,EAAAA,IAAI,EAAE,cADe;AAErBJ,EAAAA;AAFqB,CAAD,CAAT,CAGZjB,YAHY,CAAf","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component {\n\n    renderError({ error, touched }) {\n        if (touched && error) {\n            return (\n                <div className='ui error message'>\n                    <div className='header'>\n                        {error}\n                    </div>\n                </div>\n            );\n        }\n    };\n\n    renderInput = ({ input, label, meta }) => {\n        const className = ``\n        return (\n            <div className='field'>\n                <label>{label}</label>\n                <input {...input} autoComplete='off' />\n                {this.renderError(meta)}\n            </div>\n        );\n        // return <input onChange={formProps.input.onChange} value={formProps.input.value} />;\n    }\n\n    onSubmit(formValues) {\n        console.log(formValues);\n    };\n\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className='ui form error'>\n                <Field name='title' component={this.renderInput} label='Enter title' />\n                <Field name='description' component={this.renderInput} label='Enter description' />\n                <button className='ui button primary'>Submit</button>\n            </form>\n        );\n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {};\n    if (!formValues.title) {\n        errors.title = 'You must enter title';\n    }\n    if (!formValues.description) {\n        errors.description = 'You must enter description';\n    }\n    return errors;\n};\n\n\nexport default reduxForm({\n    form: 'streamCreate',\n    validate\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}